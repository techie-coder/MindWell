# -*- coding: utf-8 -*-
"""MoodAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bQ6rk3h9YGBuGr30rCOUF3G5nUFydyXw

## ConversationBufferWindowMemory keeps a list of the interactions of the conversation over time. It only uses the last K interactions
"""

#!pip install langchain_groq
#!pip install langchain


from google.colab import userdata
api_key = userdata.get('groq-api-key')

from langchain.chains import LLMChain
from langchain_core.prompts import (
    ChatPromptTemplate,
    HumanMessagePromptTemplate,
    MessagesPlaceholder,
    SystemMessagePromptTemplate,
)
from langchain_core.messages import SystemMessage
from langchain.chains.conversation.memory import ConversationBufferWindowMemory
from langchain_groq import ChatGroq

from textblob import TextBlob
import numpy as np

def analyze_sentiment(text):
    """
    Analyze the sentiment of the given text.
    Returns a value between -1 (very negative) and 1 (very positive).
    """
    return TextBlob(text).sentiment.polarity


def calculate_mood_variation(sentiment_history):
    """
    Calculate the variation in mood based on sentiment history.
    Returns the standard deviation of sentiments.
    """
    return np.std(sentiment_history) if len(sentiment_history) > 1 else 0


def check_mood_trend(sentiment_history, threshold=-0.3):
    """
    Check if there's a significant negative trend in mood.
    Returns True if the trend is concerning, False otherwise.
    """
    if len(sentiment_history) < 3:
        return False

    recent_avg = np.mean(sentiment_history[-3:])
    overall_avg = np.mean(sentiment_history)
    return recent_avg < overall_avg and recent_avg < threshold



def main():
    """
    This function is the main entry point of the application. It sets up the Groq client,
    the chat interface, and handles the chat interaction with mood analysis.
    """
    # Get Groq API key
    groq_api_key = api_key
    model = 'llama3-8b-8192'

    # Initialize Groq Langchain chat object
    groq_chat = ChatGroq(
        groq_api_key=groq_api_key,
        model_name=model
    )

    print("Hey, how are you feeling today? It's okay to share whatever's on your mindâ€”I'm here to listen!")

    # Customize the system prompt to include mood analysis
    system_prompt = """
   You are an empathetic and supportive chatbot designed to interact with university students. Your primary goals are to engage in conversation, provide helpful information, and analyze the student's mood. Follow these guidelines:

    1. Mood Analysis:
       - Pay close attention to language indicative of stress, anxiety, excitement, frustration, or other emotions common in university life.
       - Consider context such as exam periods, start of semester, graduation, etc.
       - Look for signs of homesickness, academic pressure, social challenges, or career concerns.

    2. Response Approach:
       - Adjust your tone to match the student's mood - be upbeat for positive moods, supportive for negative ones.
       - Use language and references familiar to university students.
       - Be encouraging and motivational, especially when detecting stress or anxiety.

    3. Topic Awareness:
       - Be prepared to discuss common university topics: classes, exams, assignments, campus life, extracurricular activities, internships, and career planning.
       - Offer relevant advice or resources when appropriate.

    4. Mood Reflection:
       - Subtly reflect your mood analysis in your responses without explicitly stating it.
       - Use phrases like "It sounds like you might be feeling..." or "That must be..." to show empathy and understanding.

    5. Support and Resources:
       - If you detect signs of serious distress or consistent negative moods, gently suggest professional campus resources like counseling services.
       - Promote healthy habits and stress-management techniques relevant to student life.

    6. Mood Tracking:
       - Be aware that the user's mood and sentiment are being tracked over time.
       - If you're informed of significant negative trends or high mood variations, incorporate this knowledge into your responses subtly.
       - Never directly mention the tracking or specific scores.

    Always maintain a friendly, non-judgmental, and supportive tone throughout the conversation.
    """

    conversational_memory_length = 5
    memory = ConversationBufferWindowMemory(k=conversational_memory_length, memory_key="chat_history", return_messages=True)

    sentiment_history = []

    while True:
        user_question = input("You: ")

        if user_question == None or user_question == "":
            break

        if user_question:
            sentiment = analyze_sentiment(user_question)
            sentiment_history.append(sentiment)
            mood_variation = calculate_mood_variation(sentiment_history)
            concerning_trend = check_mood_trend(sentiment_history)

            # Prepare additional context for the chatbot
            mood_context = ""
            if concerning_trend and mood_variation > 0.5:
                mood_context = "The user's mood seems to have been fluctuating significantly and trending negative recently. Be extra supportive and consider gently suggesting university counseling services if appropriate."
            elif mood_variation > 0.7:
                mood_context = "The user's mood seems to have been fluctuating significantly. Be mindful of this in your response."

            prompt = ChatPromptTemplate.from_messages([
                SystemMessagePromptTemplate.from_template(system_prompt),
                MessagesPlaceholder(variable_name="chat_history"),
                SystemMessagePromptTemplate.from_template(mood_context),
                HumanMessagePromptTemplate.from_template("{human_input}")
            ])

            conversation = LLMChain(
                llm=groq_chat,
                prompt=prompt,
                verbose=False,
                memory=memory,
            )

            response = conversation.predict(human_input=user_question)
            print("Chatbot:", response)

if __name__ == "__main__":
    main()